@page "/"

<div style="text-align:center; margin-top: 85px;">
    @if (type == Types.Normal)
    {
        <a href="index.html"><img src="assets/img/yeniler/link.png" width="120px" height="120px" style="filter: drop-shadow(0px 0px 15px #000);"> &nbsp &nbsp &nbsp &nbsp &nbsp</a>
    }
    else
    {
        <a href="index.html"><img src="assets/img/yeniler/link.png" width="120px" height="120px" @onclick=@(async()=>await selectOther(Types.Normal))> &nbsp &nbsp &nbsp &nbsp &nbsp</a>
    }
    @if (type == Types.Özel)
    {
        <a href="index.html"><img src="assets/img/yeniler/özel_link.png" width="120px" height="120px" style="filter: drop-shadow(0px 0px 15px #000);"> &nbsp &nbsp &nbsp &nbsp &nbsp</a>
    }
    else
    {
        <a href="index.html"><img src="assets/img/yeniler/özel_link.png" width="120px" height="120px" @onclick=@(async()=>await selectOther(Types.Özel))> &nbsp &nbsp &nbsp &nbsp &nbsp</a>
    }
    @if (type == Types.Whatsapp)
    {
        <a href="index.html"><img src="assets/img/yeniler/whatsapp.png" width="120px" height="120px" style="filter: drop-shadow(0px 0px 15px #000);"> &nbsp &nbsp &nbsp &nbsp &nbsp</a>
    
    }
    else
    {
        <a href="index.html"><img src="assets/img/yeniler/whatsapp.png" width="120px" height="120px" @onclick=@(async()=>await selectOther(Types.Whatsapp))> &nbsp &nbsp &nbsp &nbsp &nbsp</a>
    }
    @if (type == Types.Telefon)
    {
        <a href="index.html"><img src="assets/img/yeniler/telefon.png" width="120px" height="120px" style="filter: drop-shadow(0px 0px 15px #000);"> &nbsp &nbsp &nbsp &nbsp &nbsp</a>
       
    }
    else
    {
        <a href="index.html"><img src="assets/img/yeniler/telefon.png" width="120px" height="120px" @onclick=@(async()=>await selectOther(Types.Telefon))> &nbsp &nbsp &nbsp &nbsp &nbsp</a>
    }
    @if (type == Types.Mail)
    {
        <a href="index.html"><img src="assets/img/yeniler/mail.png" width="120px" height="120px" style="filter: drop-shadow(0px 0px 15px #000);"> &nbsp &nbsp &nbsp &nbsp &nbsp</a>
        
    }
    else
    {
        <a href="index.html"><img src="assets/img/yeniler/mail.png" width="120px" height="120px" @onclick=@(async()=>await selectOther(Types.Mail))> &nbsp &nbsp &nbsp &nbsp &nbsp</a>
    }
    @if (type == Types.Sms)
    {
        <a href="index.html"><img src="assets/img/yeniler/sms.png" width="120px" height="120px" style="filter: drop-shadow(0px 0px 15px #000);"> &nbsp &nbsp &nbsp &nbsp &nbsp</a>
    }
    else
    {
        <a href="index.html"><img src="assets/img/yeniler/sms.png" width="120px" height="120px" @onclick=@(async()=>await selectOther(Types.Sms))> &nbsp &nbsp &nbsp &nbsp &nbsp</a>
    }
</div>


@if (type == Types.Normal)
{
    <input class="form-control" style="margin-top:10px" type="text" @bind="@uzunLink">
    <button id="button-fıstık" style="margin-top: 20px;" @onclick=@(async()=>await kisaltClicked())>Kısalt</button>
}
else if (type == Types.Özel)
{
    @if (!isTokenValid)
    {
        <p style="color:red; font-size: 200%;">Girişi yapmadan bu özelliği kullanamazsınız!</p>
    }
    <input class="form-control" style="margin-top:10px" type="text" @bind="@uzunLink">
    <p style="margin-top:10px; margin-left: 40px; margin-right:40px;">Kısa Link İçin İstediğiniz Uzantıyı Giriniz:</p>
    @if(ozelValid)
    {
        <input class="form-control" style="margin-top:5px; margin-left: 40px; margin-right:40px;" type="text" value="@denenecekOzel" readonly>
        <button id="button-fıstık" style="margin-top: 20px;" @onclick=@(async()=>await kisaltClicked())>Kısalt</button>
    }
    else
    {
        <input class="form-control" style="margin-top:5px; margin-left: 40px; margin-right:40px;" type="text" @bind="@denenecekOzel">
        <button id="button-fıstık" style="margin-top: 20px;" @onclick=@(async()=>await checkOzel())>Kontrol Et</button>
    }
}
else if (type == Types.Mail)
{
    <input class="form-control" style="margin-top:10px" type="email" @bind="@uzunLink">
    <button id="button-fıstık" style="margin-top: 20px;" @onclick=@(async()=>await kisaltClicked())>Kısalt</button>
}
else if (type == Types.Sms || type == Types.Telefon || type == Types.Whatsapp)
{
    <input class="form-control" style="margin-top:10px" type="number" @bind="@uzunLink">
    <button id="button-fıstık" style="margin-top: 20px;" @onclick=@(async()=>await kisaltClicked())>Kısalt</button>
}






<!--kutucuk-->
    @if (messageID == 1)
    {
        <p style="color:green">Link Başarıyla Oluşturuldu!</p>
    }
    else if(messageID == 2)
    {
    <p style="color:red">Link Oluşturma Başarısız Oldu.</p>
    }

@if (isKutucukOpen == true)
{
    @if (isTokenValid)
    {
        <Kutucuk ShortLink="@ShortLink" source="/" Token="@Token" />
    }
    else
    {
        <Kutucuk ShortLink="@ShortLink" source="/"/>
    }
}

@inject ILocalStorageService localStore
@code{
    string Token = String.Empty;
    bool isTokenValid = false;

    string uzunLink = "";
    bool? isKutucukOpen = false;  //True açık, false kapalı, null kapalı ama mesajlı

    int messageID = 0; //0 Yok, 1 Başarılı, 2 = Başarısız

    string ShortLink = String.Empty;

    Types type = Types.Normal;

    bool ozelValid = false;
    string checkedOzel = String.Empty;

    string denenecekOzel = String.Empty;

    public enum Types
    {
        Mail, Sms, Telefon, Whatsapp, Normal, Özel
    }

    protected async Task selectOther(Types t)
    {
        type = t;
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task<Task> OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                string token = await localStore.GetItemAsStringAsync("token");
                if (token != null && token != String.Empty && token.Trim() != "")
                {

                    var res = await RunHttp.Post<TokenEntity>("User/login/token", new { token = token });
                    if (res.isSuccess)
                    {
                        Token = token;
                        isTokenValid = true;
                    }
                }
            }
            catch{}
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    protected async Task kisaltClicked()
    {
        string longLink = uzunLink;
        if (longLink.Trim().Length < 1)
        {
            return;
        }
        messageID = 0;
        var obj = new CreateLinkModel
        {
                url = longLink,
        };
        if (isTokenValid)
        {
            obj.token = Token;
        }

        var res = new HttpResult<string>();
        if (type == Types.Normal)
        {
            res = await RunHttp.PutAsString("/Link", obj);
        }
        else if(type == Types.Özel)
        {
            res = await RunHttp.PutAsString("/Link/special", new CreateSpecialModel
            {
					shortUrl = checkedOzel,
                    token = Token,
					url = longLink
            });
        }
        else
        {
            if (isTokenValid)
            {
                res = await RunHttp.PutAsString("/Link/generateOther", new GenerateOtherModel
                    {
                        token = Token,
                        type = (OtherTypes)this.type,
                        value = longLink
                    });
            }
            else
            {
                res = await RunHttp.PutAsString("/Link/generateOther", new GenerateOtherModel
                    {
                        type = (OtherTypes)this.type,
                        value = longLink
                    });
            }
        }

        if (res.isSuccess)
        {
            messageID = 1;
            ShortLink = res.Result;
            isKutucukOpen = true;
        }
        else
        {
            messageID = 2;
        }
        await InvokeAsync(StateHasChanged);
    }


    protected async Task checkOzel()
    {
		if (denenecekOzel.Trim().Length < 1)
		{
			return;
		}
        string willcheck = denenecekOzel;
        try
        {
            var res = await RunHttp.Post<bool>("Link/special/check", new CheckSpecialModel
                {
                    shortUrl = willcheck,
                    token = Token
                });
            if (res.isSuccess)
            {
                if (res.Result)
                {
                    ozelValid = true;
                    checkedOzel = willcheck;
                }
            }
            await InvokeAsync(StateHasChanged);
        }
        catch
        {
            
        }
        
    }
}
